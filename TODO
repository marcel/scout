- Share the same player filtering by query string across all applicable resources rather than duplicate the implementation in each controller

- For things like loading all playeres from Yahoo API where you have to do 25 at a time, as an optimization I could do a count of existing
records by week in the db as an estimate of how many likely results the api would return, then i could use something like typheous to 
enqueue batches of concurrent requests for start=N where N is the estimated total divided by 25

- Make the sidebar menu contextual to the current section (e.g. for Injuries provide filters)

- Introduce a notion of something like a "watch list" where you can mark a player as on your watch list. Additionally, you could
choose to watch particular things, like injuries or projections. So if during an import anything changes you'll be notified.

- Add authority data like GameWeeks and Stats to seed.rb

- Look into Heroku add-ons that could do email or sms 

- Finish specifying all support filters and sub-resources for each resource

- NB: The league resource has a 'league_update_timestamp'. Don't yet know if that applies to only
changes to the league itself or any changes made by teams in the league but if the latter then
it would make it very efficient to know whether to poll for changes. Update: It appears to just be
changes made by the commissioner

- NB: In the league scoreboard sub-resource each team element includes 'team_projected_points' as well as
'team_points'.

- NB: League + standings has <points_for>276.93</points_for> and <points_against>198.47</points_against> per team.

- Import fantasy_football_nerd_id for defensive teams in Cache::Player

- Have a way of returning the current roster for a team from the DB

- Consider shaving the yak of storing just ids for yahoo entities in the DB and know how to construct the key based on
their conventions. This probably isn't worth the hassle. It would improve the performance of the indexes but the data set
is so small right now that it doesn't matter at all.

- Show aggregate high, normal and low projections for a roster for the week

- Store matchups in the db

- Investigate if there are any benefits to using 'oauth/request_proxy/typhoeus_request'

DONE:
=====

- Method to import each model that is idempotent

- If you continue to use XmlSimple for sub objects, swap in FasterXmlSimple if
  you can get it to be compatible
  
- Add position_type to Player table
  
- [NOT NEEDED] Create tables to track the most recent updated_at for various records in the DB
so it's easy to know what's changed since the last time an import was done

- FYI: Player points can be gotten through the league's players sub-resource:
Scout::Resource.league + 'players' + {:players_key=>Scout::Cache::Player.find_by_full_name('Santana Moss').yahoo_key} + 'stats' + {:type => 'week', :week => 1}

- In the absense of the API supporting something like since_id, when synching new data from the DB,
pulling just the current week's data for the resource will limit how much deduping needs to happen.